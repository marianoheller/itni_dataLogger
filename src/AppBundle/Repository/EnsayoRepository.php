<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Symfony\Component\HttpKernel\Exception\PreconditionFailedHttpException;

/**
 * EnsayoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EnsayoRepository extends EntityRepository
{

    /**
     *
     * Overload de findOneBy->id
     *
     * @param string $id : id a buscar
     * @return null|object : Devuelve null o el objecto encontrado
     */
    public function findOneByID($id) {
        return $this->findOneBy(array("id" => $id));
    }


    /**
     *
     * Checkea si hay un ensayo corriendo.
     * Es decir, checkea si hay algun ensayo SIN el t_fin seteado
     *
     * @return bool
     */

    public function isEnsayoRunning() {
        $sqlCheckIfEnsayoIsRunning =   "SELECT *,TIMESTAMPDIFF(SECOND, lastPing, NOW()) as diff
                                                FROM ensayo
                                                HAVING diff = (
                                                    SELECT MIN(TIMESTAMPDIFF(SECOND, lastPing, NOW())) as diffAux
                                                    FROM ensayo
                                                    HAVING diffAux<(5*60)
                                                    AND diffAux>= 0
                                                    AND t_fin IS NULL
                                                    )";

        try {

            $em = $this->getEntityManager();
            $stmt = $em->getConnection()->prepare($sqlCheckIfEnsayoIsRunning);
            $stmt->execute();
            $arrayQueryResult = $stmt->fetchAll();
        } catch (\Exception $e) {
            throw new NotFoundHttpException("Error al ejecutar query $sqlCheckIfEnsayoIsRunning.<br>$e->getMessage()");
        }


        return !empty($arrayQueryResult);
    }

    /**
     *
     * Adquiere el ultimo ensayo que cumple los requerimientos de ensayo "andando"
     * Es decir que no tenga t_fin seteado && el ultimo lastPing no haya sido hace tanto.
     *
     * @return array : Devuelve el ensayo actual
     */

    public function getEnsayoActual() {
        $sqlCheckIfEnsayoIsRunning =   "SELECT *,TIMESTAMPDIFF(SECOND, lastPing, NOW()) as diff
                                                FROM ensayo
                                                HAVING diff = (
                                                    SELECT MIN(TIMESTAMPDIFF(SECOND, lastPing, NOW())) as diffAux
                                                    FROM ensayo
                                                    HAVING diffAux<(5*60)
                                                    AND diffAux>= 0
                                                    AND t_fin IS NULL
                                                    )";

        try {
            $em = $this->getEntityManager();
            $stmt = $em->getConnection()->prepare($sqlCheckIfEnsayoIsRunning);
            $stmt->execute();
            $arrayQueryResult = $stmt->fetchAll();
        } catch (\Exception $e) {
            throw new NotFoundHttpException("Error al ejecutar query $sqlCheckIfEnsayoIsRunning.<br>$e->getMessage()");
        }

        return $arrayQueryResult;
    }


    /**
     *
     * Getea todos los ensayos
     *
     * @return array : Devuelve un Array con todos los ensayos
     */

    public function getAll() {
        $sqlGetAll =   "SELECT * from ensayo";


        try {
            $em = $this->getEntityManager();
            $stmt = $em->getConnection()->prepare($sqlGetAll);
            $stmt->execute();
            $arrayQueryResult = $stmt->fetchAll();
        } catch (\Exception $e) {
            throw new NotFoundHttpException("Error al ejecutar query $sqlGetAll.<br>$e->getMessage()");
        }

        return $arrayQueryResult;
    }

    /**
     *
     * Getea todos los ensayos ordenados
     *
     * @return array
     */

    public function getAllOrderedLastFirst() {
        $sqlGetAll =   "SELECT * from ensayo ORDER BY t_inicio DESC";


        try {
            $em = $this->getEntityManager();
            $stmt = $em->getConnection()->prepare($sqlGetAll);
            $stmt->execute();
            $arrayQueryResult = $stmt->fetchAll();
        } catch (\Exception $e) {
            throw new NotFoundHttpException("Error al ejecutar query $sqlGetAll.<br>$e->getMessage()");
        }

        return $arrayQueryResult;
    }

    public function getAllFinishedOrderedLastFirst() {
        $sqlGetAll =   "SELECT * from ensayo WHERE t_fin IS NOT NULL ORDER BY t_inicio DESC";
        try {
            $em = $this->getEntityManager();
            $stmt = $em->getConnection()->prepare($sqlGetAll);
            $stmt->execute();
            $arrayQueryResult = $stmt->fetchAll();
        } catch (\Exception $e) {
            throw new NotFoundHttpException("Error al ejecutar query $sqlGetAll.<br>$e->getMessage()");
        }


        return $arrayQueryResult;
    }

    public function updateLastPing() {
        $lastPingObj = new \DateTime("now",new \DateTimeZone("America/Argentina/Buenos_Aires"));
        $lastPingString = $lastPingObj->format("Y-m-d H:i:s");

        $sqlUpdateLastPing = "UPDATE ensayo a
                                    JOIN (
                                        SELECT *,TIMESTAMPDIFF(SECOND, lastPing, NOW()) as diff
                                        FROM ensayo
                                        HAVING diff = (
                                            SELECT MIN(TIMESTAMPDIFF(SECOND, lastPing, NOW())) as diffAux
                                            FROM ensayo
                                            HAVING diffAux<(5*60)
                                            AND diffAux>= 0
                                            AND t_fin IS NULL
                                            )
                                    ) b
                                    ON a.id = b.id
                                    SET a.lastPing = '$lastPingString'";
        try {
        $em = $this->getEntityManager();
        $count = $em->getConnection()->executeUpdate($sqlUpdateLastPing);
        } catch (\Exception $e) {
            throw new PreconditionFailedHttpException("Error al ejecutar query $sqlUpdateLastPing.<br>$e->getMessage()");
        }

        //Affected rows
        return $count;
    }

    public function finishAllEnsayos() {
        $sqlCancelEnsayos = "UPDATE ensayo
                                SET t_fin = lastPing";

        try {
            $em = $this->getEntityManager();
            $count = $em->getConnection()->executeUpdate($sqlCancelEnsayos);
        } catch(\Exception $e) {
            throw new PreconditionFailedHttpException("Error al ejecutar query $sqlCancelEnsayos.<br>$e->getMessage()");
        }

        //Affected rows
        return $count;
    }

}
